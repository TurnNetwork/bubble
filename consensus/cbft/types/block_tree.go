package types

import (
	"github.com/PlatONnetwork/PlatON-Go/common"
	"github.com/PlatONnetwork/PlatON-Go/core/types"
)

//BlockTree used to store blocks that are not currently written to diskï¼Œ Block of QC, LockQC. Every time you submit to blockTree, it is possible to start QC changes.
type BlockTree struct {
	// The highest block that has been written to disk, root will grow with each commit
	root *BlockExt
	// Contains blocks generated by multiple views, all blocks stored are not committed
	blocks map[uint64]map[common.Hash]*BlockExt
}

type BlockExt struct {
	//Block belongs to the view
	viewNumber uint64
	block      *types.Block

	//Is it being verified
	executing bool
	//Has it been executed
	isExecuted bool
	//Whether it has been signed
	isSigned bool
	//Time of receipt of the block
	rcvTime int64

	//blockExt only store aggregated signatures,
	qc *QuorumCert

	//Point to the parent block
	parent *BlockExt

	//There may be more than one sub-block, and the block will not be deleted if it is not in the state of LockQC.
	children map[common.Hash]*BlockExt
}

func (b *BlockTree) InsertBlock(block *types.Block) {

}
